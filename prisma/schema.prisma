generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  passwordHash String
  name         String?
  role         Role       @default(USER)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  playlists    Playlist[] // User can own multiple playlists
  logs         Log[] // User's activity logs

  @@index([email])
}

enum Role {
  USER
  ADMIN
}

// Action types for logging
enum ActionType {
  CREATE
  READ
  UPDATE
  DELETE
}

// Target entity types for logging
enum EntityType {
  PLAYLIST
  SONG
  USER
}

model Log {
  id         String     @id @default(uuid())
  timestamp  DateTime   @default(now())
  userId     String? // Who performed the action (nullable)
  user       User?      @relation(fields: [userId], references: [id])
  actionType ActionType // What action was performed
  entityType EntityType // What type of entity was affected
  entityId   String // ID of the affected entity
  details    String? // Additional details about the action (optional)

  @@index([userId])
  @@index([timestamp])
  @@index([actionType])
  @@index([entityType])
  @@index([entityId])
}

model Playlist {
  id          String   @id
  name        String
  description String
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  songCount   Int      @default(0)
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  songs       Song[]   @relation("PlaylistToSong")
  // PostgreSQL doesn't support Prisma's fulltext index - removing

  // Add indexes for search and sort operations
  @@index([name])
  @@index([description])
  @@index([updatedAt])
  @@index([songCount])
  @@index([name, updatedAt])
  @@index([userId])
}

model Song {
  id         String   @id
  title      String
  artist     String
  album      String?
  duration   Int?     @default(0)
  playlistId String
  playlist   Playlist @relation("PlaylistToSong", fields: [playlistId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  // Updated index with unique map name
  @@index([playlistId], map: "Song_playlist_relation_idx")
  // Add indexes for song filtering and sorting
  @@index([title])
  @@index([artist])
}
